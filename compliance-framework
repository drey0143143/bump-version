[
  {
    "name": "Avoid the use of the 'root' account",
    "description": "It is strongly recommended not to use the 'root' account. The root account is the most privileged AWS account; it has unrestricted access to all resources in the AWS account. Minimizing the use of this account and adopt the principle of least privilege to reduce the risk of accidental changes and unintended disclosure of highly privileged credentials.",
    "severity": "High",
    "logic": "IamUser where name regexMatch /^<root_account>$/i should not have passwordLastUsed after(-90, 'days')",
    "remediation": "We recommend that Root accounts should not be used and that the credentials not be shared with anyone else. As a best practice, customers should leverage IAM Groups, Roles and Users to grant access to specific AWS resources. Refer to IAM Best Practices at  the following link:\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.1.2\nhttps://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf",
    "complianceTag": "1.7 | Identity and Access Management",
    "logicHash": "jnZ2Ag5/fhI/qfHv3n9Fsg",
    "ruleId": "D9.AWS.IAM.01",
    "category": ""
  },
  {
    "name": "Ensure AWS IAM users have no more than one active Access Key",
    "description": "Each IAM user can have up to two access keys. Having two access keys (instead of one), increases the risk of unauthorized access and compromise of credentials.  It is also recommended to delete unused access keys.",
    "severity": "High",
    "logic": "IamUser should not have firstAccessKey.isActive=true and secondAccessKey.isActive=true",
    "remediation": "1. Sign in to the AWS Console and navigate to the 'IAM' service\n2. Click Users in the navigation pane\n3. For the identified IAM user which has two active Access Keys, based on policies of your company, take appropriate action\n4. Create another IAM user with the specific objective performed by the 2nd Access Key\n5. Delete one of the unused Access Keys",
    "complianceTag": "1.13 | Identity and Access Management",
    "logicHash": "oHt+/V6Iwesjwgzr9WVUeg",
    "ruleId": "D9.AWS.IAM.51",
    "category": ""
  },
  {
    "name": "Ensure EBS volume encryption is enabled",
    "description": "With Amazon EBS encryption, you aren't required to build, maintain, and secure your own key management infrastructure. Also it ensures that the data is encrypted and rest and during transit from EBS to EC2.",
    "severity": "High",
    "logic": "Volume should have encrypted=true",
    "remediation": "\n**From Portal:**\n1. Login to AWS Management Console and open the Amazon EC2 console using https://console.aws.amazon.com/ec2/\n2. Under `Account attributes`, click `EBS encryption`.\n3. Click `Manage`.\n4. Click the `Enable` checkbox.\n5. Click `Update EBS encryption`\n6. Repeat for every region requiring the change.\n\nNote: EBS volume encryption is configured per region.\n\n**From TF:**\nSet encrypted to true in the terraform file:\n```\nresource \"aws_ebs_volume\" \"example_volume\" {\n...\nencrypted = true\n...\n\n}\n```\n\n**From Command Line:**\n1. Run\n```\naws --region REGION ec2 enable-ebs-encryption-by-default\n```\n2. Verify that `\"EbsEncryptionByDefault\": true` is displayed.\n3. Repeat every region requiring the change.\n\nNote: EBS volume encryption is configured per region.\n\nReferences:\n1. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\n2. https://aws.amazon.com/blogs/aws/new-opt-in-to-default-encryption-for-new-ebs-volumes/\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_volume#encrypted",
    "complianceTag": "2.2.1 | Encryption and Key Management",
    "logicHash": "WOGlCrEXBOGzQErmokpK9Q",
    "ruleId": "D9.AWS.CRY.61",
    "category": ""
  },
  {
    "name": "Ensure IAM password policy prevents password reuse",
    "description": "IAM password policies can prevent the reuse of a given password by the same user. It is recommended that the password policy prevent the reuse of passwords.\nPreventing password reuse increases account resiliency against brute force login attempts.",
    "severity": "High",
    "logic": "Iam should have passwordPolicy.passwordReusePrevention=24",
    "remediation": "\n**From Portal:**\n1. Go to AWS Management Console: https://console.aws.amazon.com/iam/\n2. Navigate to IAM Services.\n3. Under Access managment go to Account settings.\n4. Select 'Change password policy'.\n5. Select 'Prevent password reuse'.\n6. Set '24' in the Remember passwords.\n7. Click save changes.\n\n**From TF:**\nSet the 'password_reuse_prevention' to be equal to 24:\n```\nresource \"aws_iam_account_password_policy\" \"strict\" {\n...\npassword_reuse_prevention       = 24\n...\n}\n```\n\n**From Command Line:**\nrun:\n```\naws iam update-account-password-policy --password-reuse-prevention 24\n```\n\nReferences:\n1. https://workbench.cisecurity.org/benchmarks/679\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html\n3. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/update-account-password-policy.html\n",
    "complianceTag": "1.9 | Identity and Access Management",
    "logicHash": "cY84+pfc5K9YHy6+NtsQRA",
    "ruleId": "D9.AWS.IAM.14",
    "category": ""
  },
  {
    "name": "Ensure IAM policies that allow full '*:*' administrative privileges are not created",
    "description": "It is recommended and considered a standard security advice to grant least privileges that is, granting only the permissions required to perform a task. IAM policies are the means by which privileges are granted to users, groups, or roles. Determine what users need to do and then craft policies for them that let the users perform only those tasks, instead of granting full administrative privileges.",
    "severity": "High",
    "logic": "IamPolicy where (arn!='arn:aws:iam::aws:policy/AdministratorAccess' and arn!='arn:aws-us-gov:iam::aws:policy/AdministratorAccess') and document.Statement contain-any [Effect = 'Allow' and (Resource ='*' or Resource contain[$='*'] ) and (Action ='*' or Action contain[$='*']) ] should have users isEmpty() and roles isEmpty() and groups isEmpty()",
    "remediation": "Using the GUI, perform the following to detach the policy that has full administrative privileges:\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n2. In the navigation pane, click Policies and then search for the policy name found in the audit step.\n3. Select the policy that needs to be deleted.\n4. In the policy action menu, select first Detach\n5. Select all Users, Groups, Roles that have this policy attached\n6. Click Detach Policy\n7. In the policy action menu, select Detach\n\n**From TF:**\n```\nresource \"aws_iam_role_policy\" \"test\" {\nname = \"apigateway-cloudwatch-logging\"\nrole = aws_iam_role.apigateway_cloudwatch_logging.id\n\npolicy = <<EOF\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n-     \"Action\": [\"*\"],\n+     \"Action\": [\"some:action\"],\n\"Resource\": \"*\"\n}\n]\n}\nEOF\n}\n```\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.1.2\nhttps://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf",
    "complianceTag": "1.16 | Identity and Access Management",
    "logicHash": "v0n0ZgR2GUUelCtrglzTyw",
    "ruleId": "D9.AWS.IAM.27",
    "category": ""
  },
  {
    "name": "Ensure MFA Delete is enable on S3 buckets",
    "description": "Enabling MFA delete for versioning is a good way to add extra protection to sensitive files stored in buckets.",
    "severity": "High",
    "logic": "S3Bucket should have versioning.mfaDelete=true",
    "remediation": "Using the AWS s3api CLI, enable MFA Delete for the S3 buckets that fail this rule, for example:\naws s3api put-bucket-versioning --bucket bucketname --versioning-configuration Status=Enabled,MFADelete=Enabled --mfa 'your-mfa-serial-number mfa-code'\n\n**From TF:**\n```\nresource \"aws_s3_bucket\" \"test\" {\nbucket = \"my-tf-test-bucket\"\nacl    = \"private\"\n\ntags = {\nName        = \"My bucket\"\nEnvironment = \"Dev\"\n}\n\n+ versioning {\n+   mfa_delete = true\n+ }\n}\n```\n\nRefer to: https://aws.amazon.com/blogs/security/securing-access-to-aws-using-mfa-part-3",
    "complianceTag": "2.1.3 | Identity and Access Management",
    "logicHash": "Z9qvJ/Ts7vLlYh5NMj7DRg",
    "ruleId": "D9.AWS.IAM.43",
    "category": ""
  },
  {
    "name": "Ensure S3 Bucket Policy is set to deny HTTP requests",
    "description": "If S3 bucket or objects needs to be public for any reason, ensure that S3 Buckets enforce encryption of data transfers using Secure Sockets Layer (SSL).",
    "severity": "High",
    "logic": "S3Bucket where policy.Statement contain-any [Effect='Allow' and  (Action contain ['s3:GetObject'] or Action contain ['s3:PutObject'] or Action contain ['s3:*'] or Action contain ['*'] ) ] should have policy.Statement contain [Effect='Deny' and Condition.Bool.aws:SecureTransport='false' and (Action contain ['s3:GetObject'] or Action contain ['s3:PutObject'] or Action contain ['s3:*'] or Action contain ['*'] ) ]",
    "remediation": "\n**From Portal:**\n1. Sign in to the AWS Management Console and open the Amazon S3 console at https://console.aws.amazon.com/s3/.\n2. In the Buckets list, choose the name of the bucket that you want to create a bucket policy for or whose bucket policy you want to edit.\n3. Choose Permissions.\n4. Under Bucket policy, choose Edit. This opens the Edit bucket policy page.\n5. On the Edit bucket policy page, explore Policy examples in the Amazon S3 User Guide, choose Policy generator to generate a policy automatically, or edit the JSON in the Policy section.\nHere add a policy statement that will Deny request with SecureTransport=true\n6. In the Policy box, edit the existing policy or paste the bucket policy from the Policy generator. Make sure to resolve security warnings, errors, general warnings, and suggestions before you save your policy.\n7. Choose Save changes, which returns you to the Bucket Permissions page.\n\n**From TF:**\nAdd a policy document to deny non-secure transport as follows:\n```\ndata \"aws_iam_policy_document\" \"example\" {\n...\nstatement {\neffect = \"Deny\"\n\nactions = [\n\"s3:*\",\n]\n\nresources = [\n\"S3_BUCKET_ARN\",\n]\n\ncondition {\ntest     = \"Bool\"\nvariable = \"aws:SecureTransport\"\n\nvalues = [\n\"false\"\n]\n}\n}\n...\n}\n```\n\n**From Command Line:**\nTo add a policy to deny non-secure transport, run:\n```\naws s3api put-bucket-policy --bucket BUCKET-NAME --policy file://policy.json\n```\n\nReferences:\n1. https://docs.aws.amazon.com/AmazonS3/latest/user-guide/add-bucket-policy.html\n2. https://aws.amazon.com/blogs/security/how-to-use-bucket-policies-and-apply-defense-in-depth-to-help-secure-your-amazon-s3-data/\n3. https://aws.amazon.com/premiumsupport/knowledge-center/s3-bucket-policy-for-config-rule/\n4. https://registry.terraform.io/providers/hashicorp/aws/3.3.0/docs/data-sources/iam_policy_document\n5. https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-policy.html",
    "complianceTag": "2.1.2 | Encryption and Key Management",
    "logicHash": "MIRyCwpsJRyLM2d45sKZjQ",
    "ruleId": "D9.AWS.CRY.04",
    "category": ""
  },
  {
    "name": "Ensure VIRTUAL or HARDWARE MFA is enabled for the 'root' account",
    "description": "The root account is the most privileged user in an AWS account. MFA adds an extra layer of protection on top of a username and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their username and password as well as for an authentication code from their AWS MFA device.\nNote: When virtual MFA is used for root accounts, it is recommended that the device used is NOT a personal device, but rather a dedicated mobile device (tablet or phone) that is managed to be kept charged and secured independent of any individual personal devices. ('non-personal virtual MFA') This lessens the risks of losing access to the MFA due to  device loss, device trade-in or if the individual owning the device is no longer employed at the company.\nEnabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that emits a time-sensitive key and have knowledge of a credential.",
    "severity": "High",
    "logic": "IamUser where name like '%root_account%' should have mfaType in('Virtual','Hardware')",
    "remediation": "\n**From Portal:**\nHardware MFA:\nNote: to manage MFA devices for the root AWS account, you must use your root account credentials to sign in to AWS. You cannot manage MFA devices for the root account using other credentials.\n1. Login to AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/\n2. Choose Dashboard, and under Security Status, expand Activate MFA on your root account\n3. Choose Activate MFA\n4. In the wizard, choose A hardware MFA device and then choose Next Step\n5. In the Serial Number box, enter the serial number that is found on the back of the MFA device\n6. In the Authentication Code 1 box, enter the six-digit number displayed by the MFA device. You might need to press the button on the front of the device to display the number\n7. Wait 30 seconds while the device refreshes the code, and then enter the next six-digit number into the Authentication Code 2 box. You might need to press the button on the front of the device again to display the second number\n8. Choose Next Step. The MFA device is now associated with the AWS account. The next time you use your AWS account credentials to sign in, you must type a code from the hardware MFA device.\n\nVirtual MFA:\nNote: to manage MFA devices for the root AWS account, you must use your root account credentials to sign in to AWS. You cannot manage MFA devices for the root account using other credentials.\n1. Login to AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/\n2. Choose Dashboard, and under Security Status, expand Activate MFA on your root account\n3. Choose Activate MFA\n4. In the wizard, choose A virtual MFA device and then choose Next Step\n5. IAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes\n6. Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see Virtual MFA Applications.) If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device)\n7. Determine whether the MFA app supports QR codes, and then do one of the following:\n- Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code\n- In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application\nWhen you are finished, the virtual MFA device starts generating one-time passwords\n8. In the Manage MFA Device wizard, in the Authentication Code 1 box, type the one time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the Authentication Code 2 box. Choose Active Virtual MFA\n\nReferences:\n1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_physical.html#enable-hw-mfa-for-root\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_virtual.html#enable-virt-mfa-for-root",
    "complianceTag": "1.5 | 1.6 | Identity and Access Management",
    "logicHash": "iRVfGpftQivOb3eqDdh2Lw",
    "ruleId": "D9.AWS.IAM.18",
    "category": ""
  },
  {
    "name": "Ensure first access key is rotated every 90 days or less",
    "description": "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.\nRotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used. Access keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.",
    "severity": "High",
    "logic": "IamUser where firstAccessKey.isActive='true' should not have firstAccessKey.lastRotated before(-90, 'days')",
    "remediation": "\n**From Portal:**\n1. Login to the AWS Management Console: https://console.aws.amazon.com/\n2. Click Services\n3. Click IAM\n4. Click on Users\n5. Select on the relevant user\n6. Click on Security Credentials\n7. Click 'Make inactive'\n8. Click 'Create access key' and save the new credentials.\n9. Make sure the Accesskey updated by trying to access your applications with the new accesskey.\n10. After you verified the new Accesskey is updated, go to the inactive Accesskey and click on Delete.\n\n**From Command Line:**\n1. To create new access key, run:\n```\naws iam create-access-key --user-name USER_NAME\n```\n2. To inactive the old access key, run:\n```\naws iam update-access-key --access-key-id ACCESS_KEY_ID --status Inactive --user-name USER_NAME\n```\n3. To delete the old access key, run:\n```\naws iam delete-access-key\t--access-key ACCESS_KEY_ID --user-name USER_NAME\n```\n\nReferences:\n1. https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey_CLIAPI'\n3. http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\n",
    "complianceTag": "1.14 | Identity and Access Management",
    "logicHash": "2mtdy7TLhfgoYHKhfovZow",
    "ruleId": "D9.AWS.IAM.06",
    "category": ""
  },
  {
    "name": "Ensure no Network ACLs allow ingress from 0.0.0.0/0 to remote server administration ports",
    "description": "The Network Access Control List (NACL) function provide stateless filtering of ingress and egress network traffic to AWS resources. It is recommended that no NACL allows unrestricted ingress access to remote server administration ports, such as SSH to port `22` and RDP to port `3389`.",
    "severity": "High",
    "logic": "NACL should not have inbound with [ source='0.0.0.0/0' and action='ALLOW' and ( ( destinationPort<=23 and destinationPortTo>=20 ) or ( destinationPort<=115 and destinationPortTo>=115 ) or ( destinationPort<=139 and destinationPortTo>=137 ) or ( destinationPort<=2049 and destinationPortTo>=2049 ) or ( destinationPort<=3389 and destinationPortTo>=3389 ) ) ]",
    "remediation": "\n**From Portal:**\n1. Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home\n2. In the left pane, click `Network ACLs`\n3. For each network ACL to remediate, perform the following:\n- Select the network ACL\n- Click the `Inbound Rules` tab\n- Click `Edit inbound rules`\n- Either A) update the Source field to a range other than 0.0.0.0/0, or, B) Click `Delete` to remove the offending inbound rule\n- Click `Save`\n\n**From TF:**\n```\nChange cidr_block in a terraform file to a specific IP or IP range:\nresource \"aws_network_acl\" \"main\" {\n...\ningress {\n...\ncidr_block = \"IP_OR_IP_RANGE\"\n}\n}\n```\n\n**From Command Line:**\nTo replace an existing inbound rule, run:\n```\naws ec2 replace-network-acl-entry --network-acl-id NETWORK-ACL-ID --ingress --rule-number RULE-NUMBER --protocol PROTOCOL --port-range From=FROM-PORT,To=TO-PORT --cidr-block RESTRICTIVE-CIDR --rule-action allow\n```\n\nReferences:\n1. https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html\n2. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/network_acl\n3. https://docs.aws.amazon.com/cli/latest/reference/ec2/replace-network-acl-entry.html",
    "complianceTag": "5.1 | Network Security",
    "logicHash": "GDiK1J8VVV7HinzTkHhw9Q",
    "ruleId": "D9.AWS.NET.73",
    "category": ""
  },
  {
    "name": "Ensure no root account access key exists",
    "description": "The root account is the most privileged user in an AWS account. AWS Access Keys provide programmatic access to a given AWS account. It is recommended that all access keys associated with the root account be removed. Removing access keys associated with the root account limits vectors by which the account can be compromised. Additionally, removing the root access keys encourages the creation and use of role based accounts that are least privileged.",
    "severity": "High",
    "logic": "IamUser where name like '%root_account%' should have firstAccessKey.isActive=false and secondAccessKey.isActive=false",
    "remediation": "Perform the following to delete or disable active root access keys being Via the AWS Console\n1. Sign in to the AWS Management Console as Root and open the IAM console at https://console.aws.amazon.com/iam/.\n2. Click on <Root_Account_Name> at the top right and select Security Credentials from the drop down list\n3. On the pop out screen Click on Continue to Security Credentials\n4. Click on Access Keys (Access Key ID and Secret Access Key)\n5. Under the Status column if there are any Keys which are Active\n5.1. Click on Make Inactive - (Temporarily disable Key - may be needed again)\n5.2. Click Delete - (Deleted keys cannot be recovered)\n\n**From TF:**\n```\nresource \"aws_iam_access_key\" \"positive1\" {\n- user    = \"root\"\npgp_key = \"keybase:some_person_that_exists\"\n+ status = \"Inactive\"\n}\n```\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.1.2\nhttps://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf",
    "complianceTag": "1.4 | Identity and Access Management",
    "logicHash": "HBtLkS+a8px8eSpXNO2GHQ",
    "ruleId": "D9.AWS.IAM.16",
    "category": ""
  },
  {
    "name": "Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports",
    "description": "Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to administrative ports ports.",
    "severity": "High",
    "logic": "SecurityGroup should not have inboundRules with [ scope='0.0.0.0/0' and ( ( port<=23 and portTo>=20 ) or ( port<=115 and portTo>=115 ) or ( port<=139 and portTo>=137 ) or ( port<=2049 and portTo>=2049 ) or ( port<=3389 and portTo>=3389 ) ) ]",
    "remediation": "\n**From Console:**\nTo update a security group rule:\n1. Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/.\n2. In the navigation pane, choose Security Groups.\n3. Select the security group.\n4. Choose Actions, Edit inbound rules to update a rule for inbound traffic.\n5. Update the Source field of the relevant rule to a specific IP or IP range as required.\n6. Choose Preview changes, Confirm.\n\n**From TF:**\n```\nChange cidr_blocks in a terraform file to a specific IP or IP range:\nresource \"aws_security_group\" \"example_sg\" {\n...\ningress {\n...\ncidr_blocks = [\"IP_OR_IP_RANGE\"]\n}\n...\n}\n```\n\n**From Command Line:**\nTo remove an existing inbound rule, run:\n```\naws ec2 revoke-security-group-ingress  --group-name GROUP-NAME --protocol PROTOCOL --port PORT --cidr 0.0.0.0/0\n```\n\nTo add a new inbound rule with specific IP or IP range, run:\n```\naws ec2 authorize-security-group-ingress  --group-name GROUP-NAME --protocol PROTOCOL --port PORT --cidr RESTRICTIVE-CIDR\n```\n\nReferences:\n1. https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html\n2. https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html\n3. https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html\n4. https://registry.terraform.io/providers/hashicorp/aws/3.16.0/docs/resources/security_group#ingress",
    "complianceTag": "5.2 | Network Security",
    "logicHash": "4ESdeOODcVDjxHbjn/PG/g",
    "ruleId": "D9.AWS.NET.23",
    "category": ""
  },
  {
    "name": "Ensure second access key is rotated every 90 days or less",
    "description": "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.\nRotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used. Access keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.",
    "severity": "High",
    "logic": "IamUser where secondAccessKey.isActive='true' should not have secondAccessKey.lastRotated before(-90, 'days')",
    "remediation": "\n**From Portal:**\n1. Login to the AWS Management Console: https://console.aws.amazon.com/\n2. Click Services\n3. Click IAM\n4. Click on Users\n5. Select on the relevant user\n6. Click on Security Credentials\n7. Click 'Make inactive'\n8. Go to the inactive Accesskey and click on Delete.\n\n**From Command Line:**\n\n1. To inactive the old access key, run:\n```\naws iam update-access-key --access-key-id ACCESS_KEY_ID --status Inactive --user-name USER_NAME\n```\n2. To delete the old access key, run:\n```\naws iam delete-access-key\t--access-key ACCESS_KEY_ID --user-name USER_NAME\n```\n\nReferences:\n1. https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey_CLIAPI'\n3. http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\n",
    "complianceTag": "1.14 | Identity and Access Management",
    "logicHash": "F5tTPbvdkrZiOxyqiD17hw",
    "ruleId": "D9.AWS.IAM.07",
    "category": ""
  },
  {
    "name": "Ensure that S3 Buckets are configured with Block public access (bucket settings)",
    "description": "Amazon S3 provides `Block public access (bucket settings)` and `Block public access (account settings)` to help you manage public access to Amazon S3 resources. By default, S3 buckets and objects are created with public access disabled. However, an IAM principal with sufficient S3 permissions can enable public access at the bucket and/or object level. While enabled, `Block public access (bucket settings)` prevents an individual bucket, and its contained objects, from becoming publicly accessible. Similarly, `Block public access (account settings)` prevents all buckets, and contained objects, from becoming publicly accessible across the entire account.",
    "severity": "High",
    "logic": "S3Bucket should have accessPublicBlock.blockPublicAcls=true and accessPublicBlock.ignorePublicAcls=true and accessPublicBlock.blockPublicPolicy=true and accessPublicBlock.restrictPublicBuckets=true",
    "remediation": "\n**From Console:**\n1. Login to AWS Management Console and open the Amazon S3 console using https://console.aws.amazon.com/s3/\n2. Select the Check box next to the Bucket.\n3. Click on 'Edit public access settings'.\n4. Click 'Block all public access'\n5. Repeat for all the buckets in your AWS account that contain sensitive data.\n\n**From TF:**\nTo enable block public access bucket setting, add following in a terraform file:\n```\nresource \"aws_route53_record\" \"route53_record_example\" {\n..\ntype = \"CNAME\"\n..\n}\n\nresource \"aws_s3_bucket_public_access_block\" \"s3Public_example\" {\n...\nbucket = \"BUCKET-NAME\"\nblock_public_acls = true\nblock_public_policy = true\nrestrict_public_buckets = true\nignore_public_acls = true\n...\n}\n```\n\n**From Command Line:**\n1. List all of the S3 Buckets\n```\naws s3 ls\n```\n2. Set the Block Public Access to true on that bucket\n```\naws s3api put-public-access-block --bucket BUCKET_NAME --public-access-block-configuration \"BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true\"\n```\n\nReferences:\n1. https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#console-block-public-access-options\n2. https://docs.aws.amazon.com/AmazonS3/latest/user-guide/block-public-access-bucket.html\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_account_public_access_block",
    "complianceTag": "2.1.5 | Network Security",
    "logicHash": "S4YAsMHK3f24X5PxAcMBbw",
    "ruleId": "D9.AWS.NET.72",
    "category": ""
  },
  {
    "name": "Ensure that S3 Buckets are encrypted with CMK",
    "description": "Ensure that S3 Buckets have server-side encryption at rest enabled, and are using customer-managed keys. Customer managed keys are KMS keys in your AWS account that you create, own, and manage.",
    "severity": "High",
    "logic": "S3Bucket should have encryption.serverSideEncryptionRules contain [ not serverSideEncryptionByDefault.serverSideEncryptionKeyManagementServiceKeyId isEmpty() ]",
    "remediation": "\n**From Portal:**\n1. Go to 'S3'\n2. For each incompliant S3 Bucket:\n3. Go to the 'Properties' tab\n4. Under 'Default encryption', choose 'Edit'\n5. Make sure 'Server-side encryption' is set to 'Enable'\n6. Set 'Encryption key type' to 'AWS Key Management Service key'\n7. Configure your AWS KMS key\n8. Save changes\n\n**From TF:**\nTo use kms key encryption for s3 bucket, use following configuration:\n```\nresource \"aws_s3_bucket\" \"example_bucket\" {\n...\nserver_side_encryption_configuration {\nrule {\napply_server_side_encryption_by_default {\nkms_master_key_id = KMS_KEY_ARN\nsse_algorithm     = \"aws:kms\"\n}\n}\n}\n}\n```\n\n**From Command Line:**\nTo enable kms key encryption for s3 bucket, run:\n```\naws s3api aws s3api put-bucket-encryption --bucket BUCKET-NAME --server-side-encryption-configuration ENCRYPTION-CONFIGURATION\n```\n\nReferences:\n1. https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html\n2. https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-encryption.html\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#enable-default-server-side-encryption",
    "complianceTag": "2.1.1 | Encryption and Key Management",
    "logicHash": "t+zyTE8amVV268sG6Jy1mw",
    "ruleId": "D9.AWS.CRY.03",
    "category": ""
  },
  {
    "name": "Ensure that encryption is enabled for RDS Instances",
    "description": "Encrypt Amazon RDS instances and snapshots at rest, by enabling the encryption option for your Amazon RDS DB instance. Amazon RDS encrypted DB instances use the industry standard AES-256 encryption algorithm to encrypt your data on the server that hosts your Amazon RDS DB instances.",
    "severity": "High",
    "logic": "RDS should have isStorageEncrypted=true",
    "remediation": "\n**From Portal:**\nTo create an encrypted RDS instance:\n1. Sign in to the AWS Management Console and open the Amazon RDS console at https://console.aws.amazon.com/rds/.\n2. In the upper-right corner of the Amazon RDS console, choose the AWS Region in which you want to create the DB instance.\n3. In the navigation pane, choose Databases.\n4. Choose Create database.\n5. In Choose a database creation method, select Standard Create.\n6. Set the other options as per your requirement\n7. In Advanced Configuration section, make sure that Enable encryption option is selected\n8. Choose Create database\n\nTo encrypt existing unencrypted database, follow these steps:\n\n1. Encrypt an unencrypted snapshot that you take from an unencrypted read replica of the DB instance.\n2. Restore a new DB instance from the encrypted snapshot to deploy a new encrypted DB instance.\n\nNote: Depending on the type of the database ou are using, you might want to consider using a replication service to replicate the data.\n\n**From TF:**\nadd storage_encrypted flag to terraform file to create encrypted database instance:\n```\nresource \"aws_db_instance\" \"db_instance_example\" {\n...\nstorage_encrypted = true\n...\n}\n```\n\n**From Command Line:**\nTo create an encrypted database, run:\n```\naws rds create-db-instance --engine ENGINE  --db-instance-identifier DB_IDENTIFIER --allocated-storage SIZE  --db-instance-class DB_INSTANCE_CLASS --vpc-security-group-ids SECURITY_GROUP_ID --db-subnet-group SUBNET_GROUP --master-username USER --master-user-password PWD -backup-retention-period DAYS --storage-encrypted\n```\n\nReferences:\n1. https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html\n2. https://aws.amazon.com/premiumsupport/knowledge-center/rds-encrypt-instance-mysql-mariadb/\n3. https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/encrypt-an-existing-amazon-rds-for-postgresql-db-instance.html\n4. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#storage_encrypted",
    "complianceTag": "2.3.1 | Encryption and Key Management",
    "logicHash": "syE0D5MAxlxBTs736B4Aow",
    "ruleId": "D9.AWS.CRY.05",
    "category": ""
  },
  {
    "name": "Ensure the S3 bucket used to store CloudTrail logs is not publicly accessible",
    "description": "CloudTrail logs a record of every API call made in your AWS account. These logs file are stored in an S3 bucket. It is recommended that the bucket policy or access control list (ACL) applied to the S3 bucket that CloudTrail logs to prevents public access",
    "severity": "High",
    "logic": "S3Bucket where policy.Statement contain [Principal.Service='cloudtrail.amazonaws.com'] should not have ( acl.grants contain [uri like 'http://acs.amazonaws.com/groups/global/%'] or policy.Statement with [Effect='Allow' and (Principal='*' or Principal.AWS='*') and Condition])",
    "remediation": "\n**From Portal:**\nPerform the following to remove any public access that has been granted to the bucket via an ACL or S3 bucket policy:\n\n1. Go to Amazon S3 console at https://console.aws.amazon.com/s3/home\n2. Right-click on the bucket and click Properties\n3. In the Properties pane, click the Permissions tab.\n4. The tab shows a list of grants, one row per grant, in the bucket ACL. Each row identifies the grantee and the permissions granted.\n5. Select the row that grants permission to Everyone or Any Authenticated User\n6. Uncheck all the permissions granted to Everyone or Any Authenticated User (click x to delete the row).\n7. Click Save to save the ACL.\n8. If the Edit bucket policy button is present, click it.\n9. Verify condition in any Statement having an Effect set to Allow and a Principal set to '*' or {'AWS' : '*'}.\n\n**From TF:**\nAdd a policy document with required permissions and appropriate condition as needed as follows:\n```\ndata \"aws_iam_policy_document\" \"example\" {\n...\nstatement {\neffect = \"Allow\"\n\nactions = [\nREQUIRED_ACTIONS\n]\nprincipals {\nREQUIRED_PRINCIPALS\n}\n\nresources = [\n\"S3_BUCKET_ARN\",\n]\n\ncondition {\ntest     = TEST\nvariable = CONTEXT_VARIABLE\n\nvalues = [\nVALUES\n]\n}\n}\n...\n}\n```\n\n**From Command Line:**\nTo add a policy with required permissions and appropriate condition as needed, run:\n```\naws s3api put-bucket-policy --bucket BUCKET-NAME --policy file://policy.json\n```\n\nReferences:\n1. https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-policy.html\n2. https://registry.terraform.io/providers/hashicorp/aws/3.3.0/docs/data-sources/iam_policy_document\n3. https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html\n4. https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html",
    "complianceTag": "3.3 | Logging",
    "logicHash": "KO0dKk5iEZHHUc2hwW4tfA",
    "ruleId": "D9.AWS.LOG.23",
    "category": ""
  },
  {
    "name": "Ensure the S3 bucket used to store CloudTrail logs is not publicly accessible without a condition",
    "description": "CloudTrail logs a record of every API call made in your AWS account. These logs file are stored in an S3 bucket. It is recommended that the bucket policy or access control list (ACL) applied to the S3 bucket that CloudTrail logs to prevents public access",
    "severity": "High",
    "logic": "S3Bucket where policy.Statement contain [Principal.Service='cloudtrail.amazonaws.com'] should not have ( acl.grants contain [uri like 'http://acs.amazonaws.com/groups/global/%'] or policy.Statement with [Effect='Allow' and (Principal='*' or Principal.AWS='*') and Condition isEmpty()])",
    "remediation": "\n**From Portal:**\nPerform the following to remove any public access that has been granted to the bucket via an ACL or S3 bucket policy:\n\n1. Go to Amazon S3 console at https://console.aws.amazon.com/s3/home\n2. Right-click on the bucket and click Properties\n3. In the Properties pane, click the Permissions tab.\n4. The tab shows a list of grants, one row per grant, in the bucket ACL. Each row identifies the grantee and the permissions granted.\n5. Select the row that grants permission to Everyone or Any Authenticated User\n6. Uncheck all the permissions granted to Everyone or Any Authenticated User (click x to delete the row).\n7. Click Save to save the ACL.\n8. If the Edit bucket policy button is present, click it.\n9. Remove any Statement having an Effect set to Allow and a Principal set to '*' or {'AWS' : '*'}.\n\n**From TF:**\nAdd a policy document with required permissions and appropriate condition as needed as follows:\n```\ndata \"aws_iam_policy_document\" \"example\" {\n...\nstatement {\neffect = \"Allow\"\n\nactions = [\nREQUIRED_ACTIONS\n]\nprincipals {\nREQUIRED_PRINCIPALS\n}\n\nresources = [\n\"S3_BUCKET_ARN\",\n]\n\ncondition {\ntest     = TEST\nvariable = CONTEXT_VARIABLE\n\nvalues = [\nVALUES\n]\n}\n}\n...\n}\n```\n\n**From Command Line:**\nTo add a policy with required permissions and appropriate condition as needed, run:\n```\naws s3api put-bucket-policy --bucket BUCKET-NAME --policy file://policy.json\n```\n\nReferences:\n1. https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-policy.html\n2. https://registry.terraform.io/providers/hashicorp/aws/3.3.0/docs/data-sources/iam_policy_document\n3. https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html\n4. https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html",
    "complianceTag": "3.3 | Logging",
    "logicHash": "m2lNrZM2KYLw7rrzcfIISw",
    "ruleId": "D9.AWS.LOG.08",
    "category": ""
  },
  {
    "name": "Ensure the default security group of every VPC restricts all traffic",
    "description": "A VPC comes with a default security group whose initial settings deny all inbound traffic, allow all outbound traffic, and allow all traffic between instances assigned to the security group. If you don't specify a security group when you launch an instance, the instance is automatically assigned to this default security group. Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that the default security group restrict all traffic.\nThe default VPC in every region should have its default security group updated to comply. Any newly created VPCs will automatically contain a default security group that will need remediation to comply with this recommendation.\n\nNOTE: When implementing this recommendation, VPC flow logging is invaluable in determining the least privilege port access required by systems to work properly because it can log all packet acceptances and rejections occurring under the current security groups. This dramatically reduces the primary barrier to least privilege engineering - discovering the minimum ports required by systems in the environment. Even if the VPC flow logging recommendation in this benchmark is not adopted as a permanent security measure, it should be used during any period of discovery and engineering for least privileged security groups.",
    "severity": "High",
    "logic": "SecurityGroup where name like 'default' should have inboundRules isEmpty() and outboundRules isEmpty()",
    "remediation": "Security Group Members\n\nPerform the following to implement the prescribed state:\n\n1. Identify AWS resources that exist within the default security group\n2. Create a set of least privilege security groups for those resources\n3. Place the resources in those security groups\n4. Remove the resources noted in #1 from the default security group\n\nSecurity Group State\n\n1. Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home\n2. Repeat the next steps for all VPCs - including the default VPC in each AWS region:\n3. In the left pane, click Security Groups\n4. For each default security group, perform the following:\n5. Select the default security group\n6. Click the Inbound Rules tab\n7. Remove any inbound rules\n8. Click the Outbound Rules tab\n9. Remove any inbound rules\nRecommended: IAM groups allow you to edit the 'name' field. After remediating default groups rules for all VPCs in all regions, edit this field to add text similar to 'DO NOT USE. DO NOT ADD RULES'\n\n**From TF:**\n```\nresource \"aws_default_security_group\" \"test\" {\nvpc_id = aws_vpc.mainvpc.id\n\ningress {\nprotocol  = -1\nself      = true\nfrom_port = 0\nto_port   = 0\n+ cidr_blocks = []\n+ ipv6_cidr_blocks = []\n}\n\n# OR\n\negress {\nfrom_port   = 0\nto_port     = 0\nprotocol    = \"-1\"\n+ cidr_blocks = []\n+ ipv6_cidr_blocks = []\n}\n}\n```\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679",
    "complianceTag": "5.3 | Network Security",
    "logicHash": "VK6A8GzBT3NdKmr4r9D0dA",
    "ruleId": "D9.AWS.NET.04",
    "category": ""
  },
  {
    "name": "Do not setup access keys during initial user setup for all IAM users that have a console password",
    "description": "AWS console defaults to no check boxes selected when creating a new IAM user. When cerating the IAM User credentials you have to determine what type of access they require.\nProgrammatic access: The IAM user might need to make API calls, use the AWS CLI, or use the Tools for Windows PowerShell. In that case, create an access key (access key ID and a secret access key) for that user.\nAWS Management Console access: If the user needs to access the AWS Management Console, create a password for the user.\nRequiring the additional steps be taken by the user for programmatic access after their profile has been created will give a stronger indication of intent that access keys are\n[a] necessary for their work and [b] once the access key is established on an account that the keys may be in use somewhere in the organization.\nNote: Even if it is known the user will need access keys, require them to create the keys themselves or put in a support ticket to have them created as a separate step from user creation.",
    "severity": "Low",
    "logic": "IamUser where passwordEnabled = 'true' should not have createDate dateDifference(firstAccessKey.lastRotated, 'seconds') < 60",
    "remediation": "\n**From Portal:**\nPerform the following to delete access keys that do not pass the audit:\n1. Login to the AWS Management Console: https://console.aws.amazon.com/iam/\n2. Click Services\n3. Click IAM\n4. Click on Users\n5. Click on Security Credentials\n6. As an Administrator\n- Click on the X (Delete) for keys that were created at the same time as the user profile but have not been used.\n7. As an IAM User\n- Click on the X (Delete) for keys that were created at the same time as the user profile but have not been used.\n\n\n**From TF:**\nTo delete an IAM user access key, delete the following resource:\n```\nresource \"aws_iam_access_key\" \"example_access_key\" {\n..\nuser   = \"USER-NAME\"\n..\n}\n```\n\n**From Command Line:**\nTo delete an IAM user access key, run:\n```\naws iam delete-access-key --access-key-id ACCESS_KEY_ID --user-name USER_NAME\n```\n\nReferences:\n1. https://docs.aws.amazon.com/cli/latest/reference/iam/delete-access-key.html\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html\n",
    "complianceTag": "1.11 | Identity and Access Management",
    "logicHash": "BBk5DPEXxU00Xi0gg5BbXA",
    "ruleId": "D9.AWS.IAM.79",
    "category": ""
  },
  {
    "name": "Ensure AWS Config is enabled in all regions",
    "description": "AWS Config is a web service that performs configuration management of supported AWS resources within your account and delivers log files to you. The recorded information includes the configuration item (AWS resource), relationships between configuration items (AWS resources), any configuration changes between resources. It is recommended to enable AWS Config be enabled in all regions.",
    "severity": "Low",
    "logic": "Region should have configurationRecorders with [allSupported=true]",
    "remediation": "From Command Line:\n\n1. Ensure there is an appropriate S3 bucket, SNS topic, and IAM role per the [AWS Config Service prerequisites]\n2. Run this command to set up the configuration recorder\n\naws configservice subscribe --s3-bucket my-config-bucket --sns-topic arn:aws:sns:us-east-1:012345678912:my-config-notice --iam-role arn:aws:iam::012345678912:role/myConfigRole\n\n3. Run this command to start the configuration recorder:\n\nstart-configuration-recorder --configuration-recorder-name <value>\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679\n\nConfiguration recorder:\nhttps://awscli.amazonaws.com/v2/documentation/api/latest/reference/configservice/subscribe.html\nhttps://awscli.amazonaws.com/v2/documentation/api/latest/reference/configservice/start-configuration-recorder.html\nhttp://docs.aws.amazon.com/config/latest/developerguide/gs-cli-prereq.html",
    "complianceTag": "3.5 | Logging",
    "logicHash": "cP2oOkH89jFbY2JNWhyEdg",
    "ruleId": "D9.AWS.LOG.04",
    "category": ""
  },
  {
    "name": "Ensure CloudTrail is enabled in all regions",
    "description": "AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).",
    "severity": "Low",
    "logic": "Region should have hasCloudTrail=true",
    "remediation": "From Command Line:\n\naws cloudtrail create-trail --name <trail_name> --bucket-name <s3_bucket_for_cloudtrail> --is-multi-region-trail\naws cloudtrail update-trail --name <trail_name> --is-multi-region-trail\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679\n\nCloudTrail concepts:\nhttps://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-management-events\nhttps://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudtrail/create-trail.html\nhttps://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudtrail/update-trail.html",
    "complianceTag": "3.1 | Logging",
    "logicHash": "ul9oJ3aOMrWAPm4QSV5sLQ",
    "ruleId": "D9.AWS.LOG.07",
    "category": ""
  },
  {
    "name": "Ensure CloudTrail log file validation is enabled",
    "description": "CloudTrail log file validation creates a digitally signed digest file containing a hash of each log that CloudTrail writes to S3. These digest files can be used to determine whether a log file was changed, deleted, or unchanged after CloudTrail delivered the log. It is recommended that file validation be enabled on all CloudTrails.",
    "severity": "Low",
    "logic": "CloudTrail should have logFileValidationEnabled=true",
    "remediation": "Perform the following to enable log file validation on a given trail: Via the management Console\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/cloudtrail\n2. Click on Trails on the left navigation pane\n3. Click on target trail 4. Within the S3 section click on the edit icon (pencil)\n5. Click Advanced\n6. Click on the Yes radio button in section Enable log file validation\n7. Click Save\n\n**From TF:**\n```\nresource \"aws_cloudtrail\" \"negative1\" {\nname                          = \"negative1\"\ns3_bucket_name                = \"bucketlog1\"\n+ enable_log_file_validation    = true\n}\n```\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.1.2\nhttps://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf",
    "complianceTag": "3.2 | Logging",
    "logicHash": "Fei/D4WfIb8eD28c7ibnMw",
    "ruleId": "D9.AWS.LOG.02",
    "category": ""
  },
  {
    "name": "Ensure CloudTrail logs are encrypted at rest using KMS CMKs",
    "description": "AWS CloudTrail is a web service that records AWS API calls for an account and makes those logs available to users and resources in accordance with IAM policies. AWS Key Management Service (KMS) is a managed service that helps create and control the encryption keys used to encrypt account data, and uses Hardware Security Modules (HSMs) to protect the security of encryption keys. CloudTrail logs can be configured to leverage server side encryption (SSE) and KMS customer created master keys (CMK) to further protect CloudTrail logs. It is recommended that CloudTrail be configured to use SSE-KMS.",
    "severity": "Low",
    "logic": "CloudTrail should have kmsKeyId",
    "remediation": "\n\n**From TF:**\n```\nresource \"aws_cloudtrail\" \"test\" {\nname                          = \"negative1\"\ns3_bucket_name                = \"bucketlog1\"\n+ kms_key_id                    = \"arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012\"\n}\n```\n\nFrom Command Line:\n\naws cloudtrail update-trail --name <trail_name> --kms-id <cloudtrail_kms_key>\naws kms put-key-policy --key-id <cloudtrail_kms_key> --policy <cloudtrail_kms_key_policy>\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679\n\nCloudTrail and KMS:\nhttps://docs.aws.amazon.com/awscloudtrail/latest/userguide/encrypting-cloudtrail-log-files-with-aws-kms.html\nhttps://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html\nhttps://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudtrail/update-trail.html\nhttps://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/put-key-policy.html",
    "complianceTag": "3.7 | Logging",
    "logicHash": "8cYtD+S9PYgykF2D4ToCfw",
    "ruleId": "D9.AWS.LOG.06",
    "category": ""
  },
  {
    "name": "Ensure IAM Users Receive Permissions Only Through Groups",
    "description": "It is recommended that IAM policies be applied directly to groups and roles but not to users. IAM policies are the means by which privileges are granted to users, groups, or roles. By default, IAM users, groups, and roles have no access to AWS resources.\nAssigning privileges at the group or role level reduces the complexity of access management as the number of users grow. Reducing access management complexity may in-turn reduce opportunity for a principal to inadvertently receive or retain excessive privileges.",
    "severity": "Low",
    "logic": "IamUser where not (name regexMatch /^<root_account>$/i ) should have managedPolicies isEmpty() and inlinePolicies isEmpty()",
    "remediation": "\n**From Portal:**\nTo remove a direct association between a user and policy:\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n2. In the left navigation pane, click on Users\n3. For each user:\n1. Select the user\n2. Click on the Permissions tab\n3. Expand Managed Policies\n4. Click Detach Policy for each policy\n5. Expand Inline Policies\n6. Click Remove Policy for each policy\n\nTo create an IAM group and assign a policy to it:\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/\n2. In the navigation pane, click Groups and then click Create New Group .\n3. In the Group Name box, type the name of the group and then click Next Step .\n4. In the list of policies, select the check box for each policy that you want to apply to all members of the group. Then click Next Step.\n5. Click Create Group\n\nTo add a user to a given group:\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.\n2. In the navigation pane, click Groups\n3. Select the group to add a user to\n4. Click Add Users To Group\n5. Select the users to be added to the group\n6. Click Add Users\n\n**From TF:**\nTo add user to a group, add following:\n```\nresource \"aws_iam_group_membership\" \"add_user_to_group_example\" {\n...\nusers = [\nUSER-1-NAME,\nUSER-2-NAME,\n]\ngroup = GROUP-NAME\n...\n}\n```\n\n**From Command Line:**\nTo remove the specified managed policy from a specified user, run:\n```\naws iam detach-user-policy --user-name USER-NAME --policy-arn POLICY-ARN\n```\n\nTo attach a policy to IAM group, run:\n```\naws iam attach-group-policy --group-name GROUP-NAME --policy-arn POLICY-ARN\n```\n\nTo add a user to a group, run:\n```\naws iam add-user-to-group --group-name GROUP-NAME --user-name USER-NAME\n```\n\n**References:**\n1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_create.html\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_add-remove-users.html\n3. https://docs.aws.amazon.com/cli/latest/reference/iam/add-user-to-group.html\n4. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_user_group_membership",
    "complianceTag": "1.15 | Identity and Access Management",
    "logicHash": "1Ufb5whTdTYU6VLIqa5Iqw",
    "ruleId": "D9.AWS.IAM.20",
    "category": ""
  },
  {
    "name": "Ensure IAM instance roles are used for AWS resource access from instances",
    "description": "Applications running on EC2 instances frequently access additional AWS services and must be granted permissions to make API calls. The recommended approach for granting EC2-based applications AWS permissions is with an IAM role for EC2 because this eliminates the need to distribute and rotate long-term credentials on EC2 instances. When creating IAM roles, associate least-privilege IAM policies that restrict access to the specific API calls the application requires.",
    "severity": "Low",
    "logic": "Instance should not have profileArn isEmpty()",
    "remediation": " On the AWS IAM Console:\n1. Navigate to the the AWS console IAM dashboard.\n2. In the navigation pane, select Roles, Create new role.\n3. Under 'Select the service that will use this role' select EC2, then 'Next:Permissions.'\n4. On the Attach permissions policies page, select an AWS managed policy that grants your instance access to the resources that they need, then 'Next:Tags.'\n5. Add tags (optional), the select 'Next:Review.'\n6. On the Create role and Review page, type a name for the role and Select Create role.\n\nOn the AWS EC2 Console:\n1. Navigate to the the AWS console EC2 dashboard.\n2. Select Running Instances.\n3. Check the instance you want to modify.\n4. From the Actions pull down menu, select Instance Settings and Attach/Replace IAM Role.\n5. On the Attach/Replace IAM Role page, under the IAM role pull down menu, select the role created in the IAM steps above.",
    "complianceTag": "1.18 | Identity and Access Management",
    "logicHash": "S0TfBf0MHqhnuZwrFsAZgQ",
    "ruleId": "D9.AWS.IAM.54",
    "category": ""
  },
  {
    "name": "Ensure IAM password policy requires minimum length of 14 or greater",
    "description": "Set the IAM password policy to ensure passwords consist of at least 14 characters. Password policies are, in part, used to enforce password complexity requirements. Setting a password complexity policy increases account resiliency against brute force login attempts.",
    "severity": "Low",
    "logic": "Iam should have passwordPolicy.minPasswordLength>=14",
    "remediation": "\n**From Portal:**\n1. Go to AWS Management Console: https://console.aws.amazon.com/iam/\n2. Navigate to IAM Services.\n3. Under Access managment go to Account settings.\n4. Select 'Change password policy'.\n5. Set the Enforce minimum password length to be '14' characters.\n6. Click save changes.\n\n**From TF:**\nSet the 'minimum_password_length' to be equal to 14:\n```\nresource \"aws_iam_account_password_policy\" \"strict\" {\n...\nminimum_password_length        = 14\n...\n}\n```\n\n**From Command Line:**\nrun:\n```\naws iam update-account-password-policy --minimum-password-length 14\n```\n\nReferences:\n1. https://workbench.cisecurity.org/benchmarks/679\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html\n3. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/update-account-password-policy.html\n",
    "complianceTag": "1.8 | Identity and Access Management",
    "logicHash": "pFx4oj3m+VLtL7TgYNI2Wg",
    "ruleId": "D9.AWS.IAM.12",
    "category": ""
  },
  {
    "name": "Ensure IAM users are managed centrally via identity federation or AWS Organizations for multi-account environments",
    "description": "Centralizing IAM user management to a single identity store reduces complexity and thus the likelihood of access management errors.",
    "severity": "Low",
    "logic": "List<IamSAMLProvider> should have items length() > 0",
    "remediation": "\nNote: This remediation procedure needs to be assessed manually, and will vary based on the individual organization's implementation of identity federation and/or AWS Organizations with the acceptance criteria that no non-service IAM users, and non-root accounts, are present outside the account providing centralized IAM user management.\n\n**From Portal:**\nFor multi-account AWS environments with an external identity provider:\n*For multi-account AWS environments implementing AWS Organizations without an external identity provider, skip to step 5.\n1. Login into the master account for identity federation or IAM user management\n2. Go to 'IAM'\n3. In the menu, under 'Access management', choose 'Identity providers'\n4. Verify the configurations\n5. Determine all accounts that should not have local users present and switch role into each identified account\n6. Go to 'IAM'\n7. In the menu, under 'Access management', choose 'Users'\n8. Confirm that no IAM users representing individuals are present\n\nReferences:\n1. https://workbench.cisecurity.org/sections/615823/recommendations/1009540\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers.html\n3. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create.html\n",
    "complianceTag": "1.21 | Identity and Access Management",
    "logicHash": "DaY5+ozKjI8eiv5o1U4rag",
    "ruleId": "D9.AWS.IAM.66",
    "category": ""
  },
  {
    "name": "Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket",
    "description": "S3 Bucket Access Logging generates a log that contains access records for each request made to your S3 bucket. An access log record contains details about the request, such as the request type, the resources specified in the request worked, and the time and date the request was processed. It is recommended that bucket access logging be enabled on the CloudTrail S3 bucket.\nBy enabling S3 bucket logging on target S3 buckets, it is possible to capture all events which may affect objects within an target buckets. Configuring logs to be placed in a separate bucket allows access to log information which can be useful in security and incident response workflows.",
    "severity": "Low",
    "logic": "S3Bucket where policy.Statement contain [Principal.Service='cloudtrail.amazonaws.com'] should have logging.enabled='true'",
    "remediation": "Perform the following to enable S3 bucket logging: Via the Management Console:\n\n1. Sign in to the AWS Management Console and open the S3 console at https://console.aws.amazon.com/s3\n2. Under All Buckets click on the target S3 bucket\n3. Click on Properties in the top right of the console\n4. Under Bucket: '<s3_bucket_for_cloudtrail>' click on Logging\n5. Configure bucket logging\n5.1. Click on Enabled checkbox\n5.2. Select Target Bucket from list\n5.3. Enter a Target Prefix\n6. Click Save\n\nDefault Value: Logging is disabled.\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679\n\nAmazon S3 server access logging:\nhttps://docs.aws.amazon.com/AmazonS3/latest/dev/ServerLogs.html",
    "complianceTag": "3.6 | Logging",
    "logicHash": "CIiGKr8zSDlruWpKA4jkwg",
    "ruleId": "D9.AWS.LOG.05",
    "category": ""
  },
  {
    "name": "Ensure VPC flow logging is enabled in all VPCs",
    "description": "VPC Flow Logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. After you've created a flow log, you can view and retrieve its data in Amazon CloudWatch Logs.\nVPC Flow Logs provide visibility into network traffic that traverses the VPC and can be used to detect anomalous traffic or insight during security workflows.",
    "severity": "Low",
    "logic": "VPC should have hasFlowLogs=true",
    "remediation": "Perform the following to determine if VPC Flow logs is enabled:\n\nVia the Management Console:\n1. Sign into the management console\n2. Select Services then VPC\n3. In the left navigation pane, select Your VPCs\n4. Select a VPC\n5. In the right pane, select the Flow Logs tab.\n6. If no Flow Log exists, click Create Flow Log\n7. For Filter, select Reject\n8. Enter in a Role and Destination Log Group\n9. Click Create Log Flow\n10. Click on CloudWatch Logs Group\n\n**From TF:**\n```\nresource \"aws_vpc\" \"main\" {\ncidr_block = \"10.0.0.0/16\"\n}\n\n+ resource \"aws_flow_log\" \"example\" {\n+    iam_role_arn    = aws_iam_role.example.arn\n+    log_destination = aws_cloudwatch_log_group.example.arn\n+    traffic_type    = \"ALL\"\n+    vpc_id          = aws_vpc.example.id # *** can't be same VPC ***\n+  }\n\n+ resource \"aws_flow_log\" \"example2\" {\n+   iam_role_arn    = aws_iam_role.example.arn\n+   log_destination = aws_cloudwatch_log_group.example.arn\n+   traffic_type    = \"ALL\"\n+   vpc_id          = aws_vpc.example.id\n+ }\n```\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679\n\nFlowLogs:\nhttps://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html",
    "complianceTag": "3.9 | Logging",
    "logicHash": "V9F9WLWTD3ExWJQyr3Zf4Q",
    "ruleId": "D9.AWS.LOG.22",
    "category": ""
  },
  {
    "name": "Ensure a log metric filter and alarm exist for AWS Config configuration changes",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.\nMonitoring changes to AWS Config configuration will help ensure sustained visibility of configuration items within the AWS account.",
    "severity": "Low",
    "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{($.eventSource = config.amazonaws.com) && (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.eventName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}')] length() > 0]",
    "remediation": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.3.0: https://workbench.cisecurity.org/benchmarks/679\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679",
    "complianceTag": "4.9 | Monitoring",
    "logicHash": "/wXbj7Q2epO3UtkXgTWyuA",
    "ruleId": "D9.AWS.MON.09",
    "category": ""
  },
  {
    "name": "Ensure a log metric filter and alarm exist for AWS Management Console authentication failures",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for failed console authentication attempts.\nMonitoring failed console logins may decrease lead time to detect an attempt to brute force a credential, which may provide an indicator, such as source IP, that can be used in other event correlation.",
    "severity": "Low",
    "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventName = ConsoleLogin) && ($.errorMessage = Failed authentication) }')] length() > 0]",
    "remediation": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.3.0:\nhttps://workbench.cisecurity.org/benchmarks/679\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679",
    "complianceTag": "4.6 | Monitoring",
    "logicHash": "avrjhWut3T0ClguNn8uRlA",
    "ruleId": "D9.AWS.MON.06",
    "category": ""
  },
  {
    "name": "Ensure a log metric filter and alarm exist for CloudTrail configuration changes",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.\nMonitoring changes to CloudTrail's configuration will help ensure sustained visibility to activities performed in the AWS account.",
    "severity": "Low",
    "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) ||($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName =StopLogging) }')] length() > 0]",
    "remediation": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.3.0: https://workbench.cisecurity.org/benchmarks/679\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679\n\nCreating CloudWatch Alarms for CloudTrail Events: Examples:\nhttps://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html",
    "complianceTag": "4.5 | Monitoring",
    "logicHash": "qtrirEtxV9UZW6m2ppE6BQ",
    "ruleId": "D9.AWS.MON.05",
    "category": ""
  },
  {
    "name": "Ensure a log metric filter and alarm exist for IAM policy changes",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.\nMonitoring changes to IAM policies will help ensure authentication and authorization controls remain intact.",
    "severity": "Low",
    "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)||($.eventName=SetDefaultPolicyVersion)||($.eventName=AddUserToGroup)||($.eventName=UpdateAssumeRolePolicy)}')] length() > 0]",
    "remediation": "\nNote: This remediation process assumes SNS topic and log group are already configured.\n\n**From Portal:**\n1. Go to 'CloudWatch'\n2. In the menu, under 'Logs', choose 'Log groups' and choose the relevant log group\n3. Press 'Create new metric filter' and add the following 'Filter pattern': '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)||($.eventName=SetDefaultPolicyVersion)||($.eventName=AddUserToGroup)||($.eventName=UpdateAssumeRolePolicy)}'\n4. Review and create the new metric filter\n5. In the menu, under 'Alarms', choose 'All alarms' and choose the relevant log group\n6. Press 'Create alarm' and choose the relevant metric and press 'Next'\n7. Under 'Metric', make sure 'Statistic' is set to 'Sum'\n8. Under 'Conditions', make sure the threshold type is set to 'Static', an alarm condition is set to 'Greater/Equal' and the threshold value is set to '1'\n9. Configure your SNS topic under 'Notification'\n10. Create the alarm\n\n**From TF:**\nCreate a new CloudWatch metric filter:\n```\nresource \"aws_cloudwatch_log_metric_filter\" \"metric_filter_example\" {\n..\nname             = \"FILTER-NAME\"\npattern          = \"{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)||($.eventName=SetDefaultPolicyVersion)||($.eventName=AddUserToGroup)||($.eventName=UpdateAssumeRolePolicy)}\"\nlog_group_name   = \"LOG-GROUP-NAME\"\n\nmetric_transformation {\nname      = \"METRIC-NAME\"\nnamespace = \"NAMESPACE-NAME\"\nvalue     = \"1\"\n..\n}\n}\n```\nCreate a new CloudWatch metric alarm:\n```\nresource \"aws_cloudwatch_metric_alarm\" \"metric_alarm_example\" {\n..\nalarm_name            = \"ALARM-NAME\"\ncomparison_operator   = \"GreaterThanOrEqualToThreshold\"\nevaluation_periods    = \"1\"\nmetric_name           = \"METRIC-NAME\"\nnamespace             = \"NAMESPACE-NAME\"\nperiod                = \"PERIOD\"\nstatistic             = \"Sum\"\nthreshold             = \"1\"\nalarm_actions         = [\"SNS-TOPIC-ARN\"]\n..\n}\n```\n\n**From Command Line:**\nCreate a new CloudWatch metric filter:\n```\naws logs put-metric-filter --region REGION --log-group-name LOG-GROUP-NAME --filter-name FILTER-NAME --filter-pattern '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)||($.eventName=SetDefaultPolicyVersion)||($.eventName=AddUserToGroup)||($.eventName=UpdateAssumeRolePolicy)}' --metric-transformations metricName=METRIC-NAME,metricNamespace=METRIC-NAMESPACE,metricValue=1\n```\nCreate a new CloudWatch metric alarm:\n```\naws cloudwatch put-metric-alarm --region REGION --alarm-name ALARM-NAME --metric-name METRIC-NAME --statistic Sum --period PERIOD --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace NAMESPACE --alarm-actions SNS-TOPIC-ARN\n```\n\nReferences:\n1. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CreateMetricFilterProcedure.html\n2. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ConsoleAlarms.html\n3. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/logs/put-metric-filter.html\n4. https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/put-metric-alarm.html\n5. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_log_metric_filter\n6. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_metric_alarm\n7. https://docs.aws.amazon.com/IAM/latest/APIReference/API_Operations.html\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679\n",
    "complianceTag": "4.4 | Monitoring",
    "logicHash": "rNxA7MdGOzs/WsXoEr4TTg",
    "ruleId": "D9.AWS.MON.04",
    "category": ""
  },
  {
    "name": "Ensure a log metric filter and alarm exist for Management Console sign-in without MFA",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms.\nMonitoring for single-factor console logins will increase visibility into accounts that are not protected by MFA.",
    "severity": "Low",
    "logic": "List<CloudTrail> should have items with [ hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventName = ConsoleLogin) && ($.additionalEventData.MFAUsed != Yes) }') or filterPattern isFilterPatternEqual('{ $.userIdentity.sessionContext.attributes.mfaAuthenticated != true }')] ] length() > 0]",
    "remediation": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.3.0: https://workbench.cisecurity.org/benchmarks/679\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679",
    "complianceTag": "4.2 | Monitoring",
    "logicHash": "ivL611FueFugX4S9c8LJCA",
    "ruleId": "D9.AWS.MON.02",
    "category": ""
  },
  {
    "name": "Ensure a log metric filter and alarm exist for S3 bucket policy changes",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.\nMonitoring changes to S3 bucket policies may reduce time to detect and correct permissive policies on sensitive S3 buckets.",
    "severity": "Low",
    "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) ||($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) ||($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName= DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }')]length() > 0]",
    "remediation": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.3.0: https://workbench.cisecurity.org/benchmarks/679\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679",
    "complianceTag": "4.8 | Monitoring",
    "logicHash": "UiW4MYzMcM6hyzZ2dwIfjg",
    "ruleId": "D9.AWS.MON.08",
    "category": ""
  },
  {
    "name": "Ensure a log metric filter and alarm exist for VPC changes",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.",
    "severity": "Low",
    "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventName = CreateVpc) || ($.eventName =DeleteVpc) || ($.eventName =ModifyVpcAttribute) ||($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }')]] length() > 0]",
    "remediation": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.3.0: https://workbench.cisecurity.org/benchmarks/679\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679",
    "complianceTag": "4.14 | Monitoring",
    "logicHash": "nssQ7UvCMv7Som8MWJS1mA",
    "ruleId": "D9.AWS.MON.14",
    "category": ""
  },
  {
    "name": "Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL)",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. NACLs are used as a stateless packet filter to control ingress and egress traffic for subnets within a VPC. It is recommended that a metric filter and alarm be established for changes made to NACLs.\nMonitoring changes to NACLs will help ensure that AWS resources and services are not unintentionally exposed.",
    "severity": "Low",
    "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName =DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }')] length() > 0]",
    "remediation": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.3.0: https://workbench.cisecurity.org/benchmarks/679\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679",
    "complianceTag": "4.11 | Monitoring",
    "logicHash": "YbrFxpfY3DRouLKlaiNdog",
    "ruleId": "D9.AWS.MON.11",
    "category": ""
  },
  {
    "name": "Ensure a log metric filter and alarm exist for changes to network gateways",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.\nMonitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path.",
    "severity": "Low",
    "logic": "List<CloudTrail> should have items with [ hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }')] length() > 0]",
    "remediation": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.3.0: https://workbench.cisecurity.org/benchmarks/679\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679",
    "complianceTag": "4.12 | Monitoring",
    "logicHash": "A+/vhHvzhyaS2buGrf/rHg",
    "ruleId": "D9.AWS.MON.12",
    "category": ""
  },
  {
    "name": "Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for customer created CMKs which have changed state to disabled or scheduled deletion.\nData encrypted with disabled or deleted keys will no longer be accessible.",
    "severity": "Low",
    "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{($.eventSource = kms.amazonaws.com) && (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))}')] length() > 0]",
    "remediation": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.3.0: https://workbench.cisecurity.org/benchmarks/679\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679",
    "complianceTag": "4.7 | Monitoring",
    "logicHash": "Da7h6lmr/hVVSdH9SGvCbA",
    "ruleId": "D9.AWS.MON.07",
    "category": ""
  },
  {
    "name": "Ensure a log metric filter and alarm exist for route table changes",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.\nMonitoring changes to route tables will help ensure that all VPC traffic flows through an expected path.",
    "severity": "Low",
    "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }')] length() > 0]",
    "remediation": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.3.0: https://workbench.cisecurity.org/benchmarks/679\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679",
    "complianceTag": "4.13 | Monitoring",
    "logicHash": "iyrOlVFUD9vRT8n/U0rMxQ",
    "ruleId": "D9.AWS.MON.13",
    "category": ""
  },
  {
    "name": "Ensure a log metric filter and alarm exist for security group changes",
    "description": "Monitoring changes to security group will help ensure that resources and services are not unintentionally exposed. ",
    "severity": "Low",
    "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual ('{($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup)}')] length() > 0]",
    "remediation": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.3.0: https://workbench.cisecurity.org/benchmarks/679\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679",
    "complianceTag": "4.10 | Monitoring",
    "logicHash": "sO7cmN5wguWDxX2hW/6BRQ",
    "ruleId": "D9.AWS.MON.10",
    "category": ""
  },
  {
    "name": "Ensure a log metric filter and alarm exist for unauthorized API calls",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.\nMonitoring unauthorized API calls will help reveal application errors and may reduce time to detect malicious activity.",
    "severity": "Low",
    "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.errorCode = *UnauthorizedOperation) || ($.errorCode =AccessDenied*) || ($.eventName!=HeadBucket) }')] length() > 0]",
    "remediation": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.3.0: https://workbench.cisecurity.org/benchmarks/679\n2. Create an SNS topic that the alarm will notify\n3. Create an SNS subscription to the topic created in step 2\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679\n\nCount Log Events:\nhttps://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CountingLogEventsExample.html",
    "complianceTag": "4.1 | Monitoring",
    "logicHash": "7UlZ/jFgq3PzXVglW3So5g",
    "ruleId": "D9.AWS.MON.01",
    "category": ""
  },
  {
    "name": "Ensure a log metric filter and alarm exist for usage of 'root' account",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for root login attempts.\nMonitoring for root account logins will provide visibility into the use of a fully privileged account and an opportunity to reduce the use of it.",
    "severity": "Low",
    "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ $.userIdentity.type = Root && $.userIdentity.invokedBy NOT EXISTS && $.eventType != AwsServiceEvent }')] length() > 0]",
    "remediation": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n1. Create a metric filter based on filter pattern relevant for this check. For More details, refer to CIS Amazon Web Services Foundations Benchmark v1.1.2\nhttps://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf\n2. Create an SNS topic that the alarm will notify Note: you can execute this command once and then re-use the same topic for all monitoring alarms.\n3. Create an SNS subscription to the topic created in step 2 Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.1.2\nhttps://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf",
    "complianceTag": "4.3 | Monitoring",
    "logicHash": "TzjjandyFJPFzq+EecCI9A",
    "ruleId": "D9.AWS.MON.03",
    "category": ""
  },
  {
    "name": "Ensure a log metric filter and alarm exists for AWS Organizations changes",
    "description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.",
    "severity": "Low",
    "logic": "List<CloudTrail> should have items with [hasSNSSubscriber='true' and metricFilters with [filterPattern isFilterPatternEqual('{ ($.eventSource = organizations.amazonaws.com) && (($.eventName = \"AcceptHandshake\") || ($.eventName = \"AttachPolicy\") || ($.eventName = \"CreateAccount\") || ($.eventName = \"CreateOrganizationalUnit\") || ($.eventName = \"CreatePolicy\") || ($.eventName = \"DeclineHandshake\") || ($.eventName = \"DeleteOrganization\") || ($.eventName = \"DeleteOrganizationalUnit\") || ($.eventName = \"DeletePolicy\") || ($.eventName = \"DetachPolicy\") || ($.eventName = \"DisablePolicyType\") || ($.eventName = \"EnablePolicyType\") || ($.eventName = \"InviteAccountToOrganization\") || ($.eventName = \"LeaveOrganization\") || ($.eventName = \"MoveAccount\") || ($.eventName = \"RemoveAccountFromOrganization\") || ($.eventName = \"UpdatePolicy\") || ($.eventName = \"UpdateOrganizationalUnit\")) }')]] length() > 0]",
    "remediation": "\n**From Portal:**\nA. To create a metric filter using the CloudWatch console\n1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.\n2. In the navigation pane, choose Log groups.\n3. Choose the name of the log group.\n4. Choose Actions, Create metric filter.\n5. For Filter pattern, enter the filter pattern to use:\n{ ($.eventSource = organizations.amazonaws.com) && (($.eventName = \"AcceptHandshake\") || ($.eventName = \"AttachPolicy\") || ($.eventName = \"CreateAccount\") || ($.eventName = \"CreateOrganizationalUnit\") || ($.eventName = \"CreatePolicy\") || ($.eventName = \"DeclineHandshake\") || ($.eventName = \"DeleteOrganization\") || ($.eventName = \"DeleteOrganizationalUnit\") || ($.eventName = \"DeletePolicy\") || ($.eventName = \"DetachPolicy\") || ($.eventName = \"DisablePolicyType\") || ($.eventName = \"EnablePolicyType\") || ($.eventName = \"InviteAccountToOrganization\") || ($.eventName = \"LeaveOrganization\") || ($.eventName = \"MoveAccount\") || ($.eventName = \"RemoveAccountFromOrganization\") || ($.eventName = \"UpdatePolicy\") || ($.eventName = \"UpdateOrganizationalUnit\")) }\n6. Choose Next, and then enter a name for the filter.\n7. Under Metric details, for Metric namespace, enter a name for the CloudWatch namespace where the metric will be published. If this namespace doesn't already exist, be sure that Create new is selected.\n8. For Metric name, enter a name for the new metric.\n9. For Metric value, if your metric filter is counting occurrences of the keywords in the filter, enter 1.\n10. Choose Create metric filter.\n\nB. Create an SNS topic that the alarm will notify here: https://ap-south-1.console.aws.amazon.com/sns\n\nC. Create an SNS subscription to the topic created in step B here: https://ap-south-1.console.aws.amazon.com/sns\n\nD. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step A and an SNS topic created in step B here: https://ap-south-1.console.aws.amazon.com/cloudwatch\n\n**From TF:**\nTo create log metric filter for AWS Organization changes:\n```\nresource \"aws_cloudwatch_log_metric_filter\" \"yada\" {\nname           = NAME\npattern        = RELEVANT-FILTER-PATTERN\nlog_group_name = LOG-GROUP-NAME\n...\n}\n```\n\n**From Command Line:**\nPerform the following to setup the metric filter, alarm, SNS topic, and subscription:\n1. Create a metric filter based on filter pattern provided which checks for AWS Organizations changes and the LOG-GROUP-NAME\n```\naws logs put-metric-filter --log-group-name LOG-GROUP-NAME --filter-name FILTER-NAME --metric-transformations metricName=METRIC-NAME,metricNamespace=METRIC-NAMESPACE,metricValue=1 --filter-pattern '{ ($.eventSource = organizations.amazonaws.com) && (($.eventName = \"AcceptHandshake\") || ($.eventName = \"AttachPolicy\") || ($.eventName = \"CreateAccount\") || ($.eventName = \"CreateOrganizationalUnit\") || ($.eventName = \"CreatePolicy\") || ($.eventName = \"DeclineHandshake\") || ($.eventName = \"DeleteOrganization\") || ($.eventName = \"DeleteOrganizationalUnit\") || ($.eventName = \"DeletePolicy\") || ($.eventName = \"DetachPolicy\") || ($.eventName = \"DisablePolicyType\") || ($.eventName = \"EnablePolicyType\") || ($.eventName = \"InviteAccountToOrganization\") || ($.eventName = \"LeaveOrganization\") || ($.eventName = \"MoveAccount\") || ($.eventName = \"RemoveAccountFromOrganization\") || ($.eventName = \"UpdatePolicy\") || ($.eventName = \"UpdateOrganizationalUnit\")) }'\n```\n2. Create an SNS topic that the alarm will notify:\n```\naws sns create-topic --name SNS-TOPIC-NAME\n```\n3. Create an SNS subscription to the topic created in step 2:\n```\naws sns subscribe --topic-arn SNS-TOPIC-ARN --protocol PROTOCOL --notification-endpoint SNS-ENDPOINT\n```\n4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2:\n```\naws cloudwatch put-metric-alarm --alarm-name ALARM-NAME --metric-name METRIC-NAME --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace METRIC-NAMESPACE --alarm-actions SNS-TOPIC-ARN\n```\n\nReferences:\n1. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CreateMetricFilterProcedure.html\n2. https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html\n3. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ConsoleAlarms.html\n4. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_log_metric_filter\n5. https://docs.aws.amazon.com/cli/latest/reference/logs/put-metric-filter.html",
    "complianceTag": "4.15 | Monitoring",
    "logicHash": "2zYqZpAlBOPelbM5Ss12Nw",
    "ruleId": "D9.AWS.MON.24",
    "category": ""
  },
  {
    "name": "Ensure a support role has been created to manage incidents with AWS Support",
    "description": "AWS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role to allow authorized users to manage incidents with AWS Support.\nBy implementing least privilege for access control, an IAM Role will require an appropriate IAM Policy to allow Support Center Access in order to manage Incidents with AWS Support.",
    "severity": "Low",
    "logic": "IamPolicy where name='AWSSupportAccess' should not have users isEmpty() and roles isEmpty() and groups isEmpty()",
    "remediation": "From Command Line:\n\n1. Create an IAM role for managing incidents with AWS:\n- Create a trust relationship policy document that allows <iam_user> to manage AWS incidents, and save it locally as /tmp/TrustPolicy.json:\n{\n'Version': '2012-10-17',\n'Statement': [\n{\n'Effect': 'Allow',\n'Principal': {\n'AWS': '<iam_user>'\n},\n'Action': 'sts:AssumeRole'\n}\n]\n}\n2. Create the IAM role using the above trust policy:\naws iam create-role --role-name <aws_support_iam_role> --assume-role-policy-document file:///tmp/TrustPolicy.json\n3. Attach 'AWSSupportAccess' managed policy to the created IAM role:\naws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSSupportAccess --role-name <aws_support_iam_role>\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679\n\nManaged policies and inline policies:\nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html\nhttps://docs.aws.amazon.com/cli/latest/reference/iam/list-policies.html\nhttps://docs.aws.amazon.com/cli/latest/reference/iam/attach-role-policy.html\nhttps://docs.aws.amazon.com/cli/latest/reference/iam/list-entities-for-policy.html",
    "complianceTag": "1.17 | Identity and Access Management",
    "logicHash": "NFoJMkFFcqlvNL1VESSzmg",
    "ruleId": "D9.AWS.IAM.25",
    "category": ""
  },
  {
    "name": "Ensure credentials (with first activated accessKey) unused for 45 days or greater are disabled",
    "description": "AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 45 or greater days be deactivated or removed.\nDisabling or removing unnecessary credentials will reduce the window of opportunity for credentials associated with a compromised or abandoned account to be used.",
    "severity": "Low",
    "logic": "IamUser where firstAccessKey.isActive='true' should have firstAccessKey.lastUsedDate after(-45, 'days')",
    "remediation": "\n**From Portal:**\n1. Login to the AWS Management Console\n2. Click Services\n3. Click IAM\n4. Click on Users\n5. Click on Security Credentials\n6. Select any access keys that are over 45 days old and that have been used and click on Make Inactive\n7. Select any access keys that are over 45 days old and that have not been used and click the X to Delete\n\n\n**From Command Line:**\n\n1. To inactive access key, run:\n```\naws iam update-access-key --access-key-id ACCESS_KEY_ID --status Inactive --user-name USER_NAME\n```\n2. To delete access key, run:\n```\naws iam delete-access-key --access-key ACCESS_KEY_ID --user-name USER_NAME\n```\n\nReferences:\n1. https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#remove-credentials\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_finding-unused.html\n3. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_admin-change-user.html\n4. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html\n5. https://workbench.cisecurity.org/sections/615823/recommendations/1009530\n\n",
    "complianceTag": "1.12 | Identity and Access Management",
    "logicHash": "/A8KDyZH8wrFwpSvRQsEAw",
    "ruleId": "D9.AWS.IAM.03",
    "category": ""
  },
  {
    "name": "Ensure credentials (with second activated accessKey) unused for 45 days or greater are disabled",
    "description": "AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 45 or greater days be deactivated or removed.\nDisabling or removing unnecessary credentials will reduce the window of opportunity for credentials associated with a compromised or abandoned account to be used.",
    "severity": "Low",
    "logic": "IamUser where secondAccessKey.isActive='true' should have secondAccessKey.lastUsedDate after(-45, 'days')",
    "remediation": "\n**From Portal:**\n1. Login to the AWS Management Console\n2. Click Services\n3. Click IAM\n4. Click on Users\n5. Click on Security Credentials\n6. Select any access keys that are over 45 days old and that have been used and click on Make Inactive\n7. Select any access keys that are over 45 days old and that have not been used and click the X to Delete\n\n\n**From Command Line:**\n\n1. To inactive access key, run:\n```\naws iam update-access-key --access-key-id ACCESS_KEY_ID --status Inactive --user-name USER_NAME\n```\n2. To delete access key, run:\n```\naws iam delete-access-key --access-key ACCESS_KEY_ID --user-name USER_NAME\n```\n\nReferences:\n1. https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#remove-credentials\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_finding-unused.html\n3. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_admin-change-user.html\n4. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html\n5. https://workbench.cisecurity.org/sections/615823/recommendations/1009530\n\n",
    "complianceTag": "1.12 | Identity and Access Management",
    "logicHash": "PBymm+3/HhPtqxG8EDegiw",
    "ruleId": "D9.AWS.IAM.05",
    "category": ""
  },
  {
    "name": "Ensure first access key is rotated every 30 days or less",
    "description": "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.\nRotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used. Access keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.",
    "severity": "Low",
    "logic": "IamUser where firstAccessKey.isActive='true' should not have firstAccessKey.lastRotated before(-30, 'days')",
    "remediation": "\n**From Portal:**\n1. Login to the AWS Management Console: https://console.aws.amazon.com/\n2. Click Services\n3. Click IAM\n4. Click on Users\n5. Select on the relevant user\n6. Click on Security Credentials\n7. Click 'Make inactive'\n8. Click 'Create access key' and save the new credentials.\n9. Make sure the Accesskey updated by trying to access your applications with the new accesskey.\n10. After you verified the new Accesskey is updated, go to the inactive Accesskey and click on Delete.\n\n**From Command Line:**\n1. To create new access key, run:\n```\naws iam create-access-key --user-name USER_NAME\n```\n2. To inactive the old access key, run:\n```\naws iam update-access-key --access-key-id ACCESS_KEY_ID --status Inactive --user-name USER_NAME\n```\n3. To delete the old access key, run:\n```\naws iam delete-access-key\t--access-key ACCESS_KEY_ID --user-name USER_NAME\n```\n\nReferences:\n1. https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey_CLIAPI'\n3. http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\n",
    "complianceTag": "1.14 | Identity and Access Management",
    "logicHash": "dY3n+HzbIfaorrUWnCAosA",
    "ruleId": "D9.AWS.IAM.76",
    "category": ""
  },
  {
    "name": "Ensure first access key is rotated every 45 days or less",
    "description": "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.\nRotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used. Access keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.",
    "severity": "Low",
    "logic": "IamUser where firstAccessKey.isActive='true' should not have firstAccessKey.lastRotated before(-45, 'days')",
    "remediation": "\n**From Portal:**\n1. Login to the AWS Management Console: https://console.aws.amazon.com/\n2. Click Services\n3. Click IAM\n4. Click on Users\n5. Select on the relevant user\n6. Click on Security Credentials\n7. Click 'Make inactive'\n8. Click 'Create access key' and save the new credentials.\n9. Make sure the Accesskey updated by trying to access your applications with the new accesskey.\n10. After you verified the new Accesskey is updated, go to the inactive Accesskey and click on Delete.\n\n**From Command Line:**\n1. To create new access key, run:\n```\naws iam create-access-key --user-name USER_NAME\n```\n2. To inactive the old access key, run:\n```\naws iam update-access-key --access-key-id ACCESS_KEY_ID --status Inactive --user-name USER_NAME\n```\n3. To delete the old access key, run:\n```\naws iam delete-access-key\t--access-key ACCESS_KEY_ID --user-name USER_NAME\n```\n\nReferences:\n1. https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey_CLIAPI'\n3. http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\n",
    "complianceTag": "1.14 | Identity and Access Management",
    "logicHash": "9xmCAURvO1ch8p4s0xaMvA",
    "ruleId": "D9.AWS.IAM.78",
    "category": ""
  },
  {
    "name": "Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password",
    "description": "Multi-Factor Authentication (MFA) adds an extra layer of protection on top of a username and password. With MFA enabled, when a user signs in to an AWS  website, they will be prompted for their username and password as well as for an authentication code from their AWS MFA device. It is recommended that MFA be enabled for all accounts that have a console password.\nEnabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that emits a time-sensitive key and have knowledge of a credential.",
    "severity": "Low",
    "logic": "IamUser where passwordEnabled='true' should have mfaActive='true'",
    "remediation": "Perform the following to enable MFA:\n\n1. Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/\n2. In the navigation pane, choose Users.\n3. In the User Name list, choose the name of the intended MFA user.\n4. Choose the Security Credentials tab, and then choose Manage MFA Device.\n5. In the Manage MFA Device wizard, choose A virtual MFA device, and then choose Next Step.\nIAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes.\n6. Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see Virtual MFA Applications.) If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).\n7. Determine whether the MFA app supports QR codes, and then do one of the following:\n7.1 Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.\n7.2 In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.\nWhen you are finished, the virtual MFA device starts generating one-time passwords.\n8. In the Manage MFA Device wizard, in the Authentication Code 1 box, type the one-time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the Authentication Code 2 box. Choose Active Virtual MFA.\n\nAdditional Reference:\nCIS Amazon Web Services Foundations Benchmark v1.3.0\nhttps://workbench.cisecurity.org/benchmarks/679\n\nUsing multi-factor authentication (MFA) in AWS:\nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html\nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#enable-mfa-for-privileged-users\nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_virtual.html",
    "complianceTag": "1.10 | Identity and Access Management",
    "logicHash": "mkw5QPVL/sfHn1ZCnIhxLw",
    "ruleId": "D9.AWS.IAM.02",
    "category": ""
  },
  {
    "name": "Ensure rotation for customer created CMKs is enabled",
    "description": "AWS Key Management Service (KMS) allows customers to rotate the backing key which is key material stored within the KMS which is tied to the key ID of the Customer Created customer master key (CMK). It is the backing key that is used to perform cryptographic operations such as encryption and decryption. Automated key rotation currently retains all prior backing keys so that decryption of encrypted data can take place transparently.\nRotating encryption keys helps reduce the potential impact of a compromised key as data encrypted with a new key cannot be accessed with a previous key that may have been exposed.",
    "severity": "Low",
    "logic": "KMS where isCustomerManaged=true and deletionDate<=0 and isSymmetricKey=true should have rotationStatus=true",
    "remediation": "\n**From console**\n1.Sign in to the AWS Management Console and open the AWS Key Management Service (AWS KMS) console at https://console.aws.amazon.com/kms.\n2.To change the AWS Region, use the Region selector in the upper-right corner of the page.\n3.In the navigation pane, choose Customer managed keys.\n4.Choose the alias or key ID of a KMS key.\n5.Choose the Key rotation tab.\n6.Select the 'Automatically rotate this KMS key every year' check box.\n7.Save\n\n**From Command Line**\n```\naws kms enable-key-rotation --key-id MY_KEY_ID\n```\n**From CFT**\n\nAttribute: EnableKeyRotation should be set to true\n\n```\nType: AWS::KMS::Key\nProperties:\n...\nEnableKeyRotation: true\n...\n\n```\n\nReferences:\n1. CIS Amazon Web Services Foundations Benchmark v1.3.0 https://workbench.cisecurity.org/benchmarks/679\n2. enable-key-rotation;\nhttps://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/enable-key-rotation.html\nhttps://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html",
    "complianceTag": "3.8 | Logging",
    "logicHash": "HIspOYHOUnsvQTCiTYBp4g",
    "ruleId": "D9.AWS.LOG.09",
    "category": ""
  },
  {
    "name": "Ensure second access key is rotated every 30 days or less",
    "description": "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.\nRotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used. Access keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.",
    "severity": "Low",
    "logic": "IamUser where secondAccessKey.isActive='true' should not have secondAccessKey.lastRotated before(-30, 'days')",
    "remediation": "\n**From Portal:**\n1. Login to the AWS Management Console: https://console.aws.amazon.com/\n2. Click Services\n3. Click IAM\n4. Click on Users\n5. Select on the relevant user\n6. Click on Security Credentials\n7. Click 'Make inactive'\n8. Go to the inactive Accesskey and click on Delete.\n\n**From Command Line:**\n\n1. To inactive the old access key, run:\n```\naws iam update-access-key --access-key-id ACCESS_KEY_ID --status Inactive --user-name USER_NAME\n```\n2. To delete the old access key, run:\n```\naws iam delete-access-key\t--access-key ACCESS_KEY_ID --user-name USER_NAME\n```\n\nReferences:\n1. https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey_CLIAPI'\n3. http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\n",
    "complianceTag": "1.14 | Identity and Access Management",
    "logicHash": "47HL9JJ8tdRSMhKW99QgmA",
    "ruleId": "D9.AWS.IAM.77",
    "category": ""
  },
  {
    "name": "Ensure second access key is rotated every 45 days or less",
    "description": "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.\nRotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used. Access keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.",
    "severity": "Low",
    "logic": "IamUser where secondAccessKey.isActive='true' should not have secondAccessKey.lastRotated before(-45, 'days')",
    "remediation": "\n**From Portal:**\n1. Login to the AWS Management Console: https://console.aws.amazon.com/\n2. Click Services\n3. Click IAM\n4. Click on Users\n5. Select on the relevant user\n6. Click on Security Credentials\n7. Click 'Make inactive'\n8. Go to the inactive Accesskey and click on Delete.\n\n**From Command Line:**\n\n1. To inactive the old access key, run:\n```\naws iam update-access-key --access-key-id ACCESS_KEY_ID --status Inactive --user-name USER_NAME\n```\n2. To delete the old access key, run:\n```\naws iam delete-access-key\t--access-key ACCESS_KEY_ID --user-name USER_NAME\n```\n\nReferences:\n1. https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf\n2. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey_CLIAPI'\n3. http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\n",
    "complianceTag": "1.14 | Identity and Access Management",
    "logicHash": "L+NGtT2mhBf5UoaiRfd6MA",
    "ruleId": "D9.AWS.IAM.75",
    "category": ""
  },
  {
    "name": "Ensure security contact information is registered",
    "description": "AWS provides customers with the option of specifying the contact information for account's security team. It is recommended that this information be provided.Specifying security-specific contact information will help ensure that security advisories sent by AWS reach the team in your organization that is best equipped to respond to them.",
    "severity": "Low",
    "logic": "Account should have alternateContacts with [ alternateContactType='SECURITY' ]",
    "remediation": "\n**From Console\n1. Sign in to the AWS Management Console https://console.aws.amazon.com/\n2. Click on your account name at the top right corner of the console.\n3. From the drop-down menu Click My Account\n4. Scroll down to the Alternate Contacts section\n5. Enter contact information in the Security section,Update.\n\n\n**From Command Line**\n1. Use below coomand to update the alternateContacts\n```\naws account put-alternate-contact [--account-id VALUE] --alternate-contact-type VALUE --email-address VALUE --name VALUE --phone-number VALUE --title VALUE [--cli-input-json VALUE ] [--generate-cli-skeleton VALUE]\n```\nFor example:\n```\naws account put-alternate-contact --alternate-contact-type SECURITY --email-address test@example.com  --name Example --phone-number +1234567890 --title Example\n```\n\n**From TF**\n1. Use resource: aws_account_alternate_contact and update the arguments. Make sure type SECURITY.\n\nresource \"aws_account_alternate_contact\" \"SECURITY\" {\nalternate_contact_type = \"SECURITY\"\nname          = \"Example\"\ntitle         = \"Example\"\nemail_address = \"test@example.com\"\nphone_number  = \"+1234567890\"\n}\n\nReference:\n1. https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-update-contact.html\n2. https://docs.aws.amazon.com/cli/latest/reference/account/put-alternate-contact.html\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/account_alternate_contact",
    "complianceTag": "1.2 | Operational",
    "logicHash": "D9XczwtDy5kEoOgSzU1a9A",
    "ruleId": "D9.AWS.OPE.22",
    "category": ""
  },
  {
    "name": "Ensure that CloudTrail trails are integrated with CloudWatch Logs",
    "description": "AWS CloudTrail is a web service that records AWS API calls made in a given AWS account. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail uses Amazon S3 for log file storage and delivery, so log files are stored durably. In addition to capturing CloudTrail logs within a specified S3 bucket for long term analysis, real time analysis can be performed by configuring CloudTrail to send logs to CloudWatch Logs. For a trail that is enabled in all regions in an account, CloudTrail sends log files from all those regions to a CloudWatch Logs log group. It is recommended that CloudTrail logs be sent to CloudWatch Logs.",
    "severity": "Low",
    "logic": "CloudTrail should have cloudWatchLogsRoleArn and status.latestCloudWatchLogsDeliveryTime after (-1, 'days')",
    "remediation": "\n**From Portal:**\n1. Open the CloudTrail console at https://console.aws.amazon.com/cloudtrail/.\n2. Choose the trail name. If you choose a trail that applies to all regions, you will be redirected to the region in which the trail was created.\nYou can create a log group or choose an existing log group in the same region as the trail.\nNote: A trail that applies to all regions sends log files from all regions to the CloudWatch Logs log group that you specify.\n3. For CloudWatch Logs, choose Edit.\n4. For New or existing log group, type the log group name , and then choose Continue.\n5. For the IAM role, choose an existing role or create one. If you create an IAM role, type a role name.\n6. Choose Save changes.\n\n**From TF:**\n```\nresource \"aws_cloudwatch_log_group\" \"example_log_group\" {\n...\n}\n\nresource \"aws_cloudtrail\" \"example_cloudtrail\" {\n...\ncloud_watch_logs_group_arn = \"${aws_cloudwatch_log_group.example_log_group.arn}:*\" # CloudTrail requires the Log Stream wildcard\n...\n}\n```\n\n**From Command Line:**\nTo update the CloudTrail to add CloudWatch logs, run:\n```\naws cloudtrail update-trail --name TRAIL-NAME --cloud-watch-logs-log-group-arn LOG-GROUP-ARN --cloud-watch-logs-role-arn ROLE-ARN\n```\n\n**References:**\n1. https://docs.aws.amazon.com/cli/latest/reference/cloudtrail/update-trail.html\n2. https://docs.aws.amazon.com/awscloudtrail/latest/userguide/send-cloudtrail-events-to-cloudwatch-logs.html#send-cloudtrail-events-to-cloudwatch-logs-console\n3. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudtrail",
    "complianceTag": "3.4 | Logging",
    "logicHash": "giiUrgycXiS1LCFyShyGRQ",
    "ruleId": "D9.AWS.LOG.03",
    "category": ""
  },
  {
    "name": "Ensure that IAM Access analyzer is enabled for all regions",
    "description": "AWS IAM Access Analyzer helps you identify the resources in your organization and accounts, such as Amazon S3 buckets or IAM roles, shared with an external entity. This lets you identify unintended access to your resources and data, which is a security risk. Access Analyzer identifies resources shared with external principals by using logic-based reasoning to analyze the resource-based policies in your AWS environment",
    "severity": "Low",
    "logic": "Region should have accessAnalyzers contain-any [ status='ACTIVE' ]",
    "remediation": "\n**From Portal:**\nPerform the following to create access analyzer for each region:\n1. Open the IAM console at https://console.aws.amazon.com/iam/.\n2. Choose Access analyzer.\n3. Choose Create analyzer.\n4. On the Create analyzer page, confirm that the Region displayed is the Region where you want to enable Access Analyzer.\n5. Enter a name for the analyzer.\n6. Choose the account as the zone of trust for the analyzer.\n7. Choose Create Analyzer.\n\nTo create an analyzer with the organization as the zone of trust\n1. Open the IAM console at https://console.aws.amazon.com/iam/.\n2. Choose Access analyzer.\n3. Choose Create analyzer.\n4. On the Create analyzer page, confirm that the Region displayed is the Region where you want to enable Access Analyzer.\n5. Enter a name for the analyzer.\n6. Choose your organization as the zone of trust for the analyzer.\n7. Choose Create Analyzer.\n\n**From TF:**\nCreate access analyzer for each region as:\n```\nresource \"aws_accessanalyzer_analyzer\" \"example_analyzer\" {\nanalyzer_name = \"example\"\n}\n```\n\n**From Command Line:**\nTo create an access analyzer, run:\n```\naws accessanalyzer create-analyzer --analyzer-name ANALYZER-NAME --type ANALYZER-TYPE\n```\n\nReferences:\n1. https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\n2. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/accessanalyzer_analyzer\n3. https://docs.aws.amazon.com/cli/latest/reference/accessanalyzer/create-analyzer.html",
    "complianceTag": "1.20 | Identity and Access Management",
    "logicHash": "NgLdxSThQbgkXrObAiStOQ",
    "ruleId": "D9.AWS.IAM.74",
    "category": ""
  },
  {
    "name": "Ensure that all the expired SSL/TLS certificates stored in AWS IAM are removed",
    "description": "Removing expired SSL/TLS certificates prevents accidental invalid certificate usage and is recommended as a best practice.",
    "severity": "Low",
    "logic": "IamServerCertificate should not have expiration before(0, 'days')",
    "remediation": "\n**From Command Line:**\nTo list all IAM server certificates, run:\n```\naws iam list-server-certificates\n```\nTo delete an expired IAM server certificate, run:\n```\naws iam delete-server-certificate --server-certificate-name CERTIFICATE-NAME\n```\n\nReferences:\n1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html\n2. https://docs.aws.amazon.com/cli/latest/reference/iam/delete-server-certificate.html\n",
    "complianceTag": "1.19 | Encryption and Key Management",
    "logicHash": "eRPUO4HUpUjQxUWRi5N/2Q",
    "ruleId": "D9.AWS.CRY.56",
    "category": ""
  },
  {
    "name": "Ensure that object-level logging is enabled for S3 buckets ",
    "description": "Object-level logging allows you to incorporate S3 object access to your central auditing and logging in CloudTrail. You do have the ability to control what buckets, prefixes, and objects will be audited, and what types of actions to audit, and it will incur additional CloudTrail charges.",
    "severity": "Low",
    "logic": "S3Bucket should have objectLevelLogging=true",
    "remediation": "\n**From Portal:**\n1. Sign in to the AWS Management Console and open the Amazon S3 console at https://console.aws.amazon.com/s3/.\n2. In the Buckets list, choose the name of the bucket.\n3. Choose Properties.\n4. Under AWS CloudTrail data events, choose Configure in CloudTrail.\n5. You can create a new CloudTrail trail or reuse an existing trail and configure Amazon S3 data events to be logged in your trail.\n\n**From TF:**\n```\nresource \"aws_cloudtrail\" \"example\" {\n...\nevent_selector {\nread_write_type           = \"All\"\ninclude_management_events = true\n\ndata_resource {\ntype = \"AWS::S3::Object\"\n\n# Make sure to append a trailing '/' to your ARN if you want\n# to monitor all objects in a bucket.\nvalues = [\"BUCKET-ARN/\"]\n}\n}\n...\n}\n```\n\n**From Command Line:**\nTo enable object level logging for a s3 bucket, run:\n```\naws cloudtrail put-event-selectors --trail-name TRAIL-NAME --event-selectors '[{\"ReadWriteType\": \"All\",\"IncludeManagementEvents\": true,\"DataResources\": [{\"Type\":\"AWS::S3::Object\", \"Values\": [\"arn:aws:s3:::BUCKET-NAME/\"]}]}]'\n```\nReferences:\n1. https://docs.aws.amazon.com/AmazonS3/latest/user-guide/enable-cloudtrail-events.html\n2. https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudtrail-logging.html\n3. https://docs.aws.amazon.com/cli/latest/reference/cloudtrail/put-event-selectors.html\n4. https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudtrail",
    "complianceTag": "3.10 | 3.11 | Logging",
    "logicHash": "LrsMz7IuU/WmnaENr9JfUw",
    "ruleId": "D9.AWS.LOG.19",
    "category": ""
  }
]
